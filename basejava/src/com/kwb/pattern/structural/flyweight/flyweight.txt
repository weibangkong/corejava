享元模式:
    使用共享对象可以有效的支持大量的细粒度的对象，享元模式是一共享的方式高效的支持大量的细粒度对象，享元对象能做到共享的挂念是区分内部状态(Internal
     State)和外部状态(External State)
        内部状态是存储在享元对象内部的、可以共享的信息，并且不会随环境的改变而改变
        外部状态是随环境改变而改变且不可以共享的状态，享元对象的外部状态必须由客户端保存，并且享元对象被创建后，在需要使用的时候再传入到享元对象内部

    角色:
        抽象享元角色:该角色对享元类进行抽象，需要外部状态的操作可以通过参数的形式将外部状态传入
        具体享元角色:事项抽象享元定义的业务，享元对象的内部状态必须和环境无关，从而使得享元对象可以再系统内共享
        享元工厂角色:该角色就是构造一个池容器，负责创建和管理享元角色而，并提供从池容器中获得享元对象的方法，保证享元对象被系统适当的共享(当客户端
        需要一个享元对象时，先检查系统中是否已经有一个符合要求的享元对象，如果有，将其返回，如果没有，则新建一个合适的享元对象)
        客户端角色:该角色需要自行存储所有享元对象的外部状态

    优点:
        能大幅减少内存中对象的数量，降低程序内存的占用率，提高性能
    缺点:
        增加了系统的复杂性，需要分出外部状态和内部状态，且内部状态具有固化特性，不能随外部状态改变而改变，使得程序逻辑复杂化
        将享元对象的状态外部话，而读取外部状态使得运行时间变长

    使用场景:
        系统中大量相似的对象，这些对象耗费大量的内存
        细粒度的对象都具备较接近的外部状态，而且内部状态与环境无关，即对象没有特定神风
        需要使用缓冲池

    ps:
        Java基础类库中大量使用，如String,Integer，Boolean，Character等类都使用享元模式提供内部优化机制